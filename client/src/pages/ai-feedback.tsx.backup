import { useState, useRef } from 'react';
import { Link } from 'wouter';
import { Mic, Volume2, AlertCircle, X, Brain, RotateCcw, ArrowLeft } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import brandsData from '../data/brands.json';

interface Brand {
  name: string;
  pronunciation: string;
  phonemes: string;
  country: string;
  founded: string;
  description: string;
}

interface Phoneme {
  symbol: string;
  label?: string;
  correct?: boolean;
  brandDescription?: string;
}

interface TranscriptionResult {
  transcript?: string;
  detectedBrand?: string;
  pronunciationFeedback?: string;
  correctPhonemes?: Phoneme[];
  userPhonemes?: Phoneme[];
  accuracy?: number;
  brandFound?: boolean;
  message?: string;
  waveform?: number[];
  correctPronunciation?: string;
  referenceWaveform?: number[];
  suggestions?: string[];
  brandDescription?: string;
  brandLogo?: string;
  brandCountry?: string;
  brandFounded?: string;
  brandImages?: string[];
  azureDetails?: any;
}

const allBrands: Brand[] = brandsData;

function normalizeBrand(str: string): string {
  return str.toLowerCase().replace(/[^a-z0-9]/g, '');
}

function getClosestBrands(input: string, allBrands: Brand[], maxDistance = 3): Brand[] {
  const normalizedInput = normalizeBrand(input);
  
  if (!normalizedInput) return [];
  
  const results = allBrands.filter(brand => {
    const normalizedBrand = normalizeBrand(brand.name);
    return normalizedBrand.includes(normalizedInput) || 
           normalizedInput.includes(normalizedBrand) ||
           levenshteinDistance(normalizedInput, normalizedBrand) <= maxDistance;
  });
  
  return results.slice(0, 5);
}

function levenshteinDistance(str1: string, str2: string): number {
  const matrix = [];
  
  for (let i = 0; i <= str2.length; i++) {
    matrix[i] = [i];
  }
  
  for (let j = 0; j <= str1.length; j++) {
    matrix[0][j] = j;
  }
  
  for (let i = 1; i <= str2.length; i++) {
    for (let j = 1; j <= str1.length; j++) {
      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j] + 1
        );
      }
    }
  }
  
  return matrix[str2.length][str1.length];
}

const FeedbackDisplay = ({ result, onTryAgain, audioUrl }: { result: TranscriptionResult, onTryAgain: () => void, audioUrl?: string | null }) => {
  const detectedBrand = allBrands.find(brand => 
    normalizeBrand(brand.name) === normalizeBrand(result.detectedBrand || '')
  );

  const playCorrectPronunciation = () => {
    if (detectedBrand && 'speechSynthesis' in window) {
      window.speechSynthesis.cancel();
      const utterance = new SpeechSynthesisUtterance(detectedBrand.name);
      utterance.lang = 'en-US';
      utterance.rate = 0.8;
      utterance.pitch = 1;
      utterance.volume = 1;
      
      setTimeout(() => {
        window.speechSynthesis.speak(utterance);
      }, 100);
    }
  };

  return (
    <div className="glassmorphic rounded-3xl p-8 bg-white/60 backdrop-blur-lg border border-gold/20 shadow-2xl">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-navy font-playfair mb-4">AI Analysis Results</h2>
        
        {result.brandFound ? (
          <div className="text-xl text-teal mb-6">
            ðŸŽ‰ Brand Detected: <span className="font-bold text-navy">{result.detectedBrand}</span>
          </div>
        ) : (
          <div className="text-xl text-red-600 mb-6">
            ðŸ¤” I heard: "<span className="font-bold">{result.transcript}</span>"
          </div>
        )}
      </div>

      {/* Accuracy Score */}
      {result.accuracy !== undefined && (
        <div className="text-center mb-8">
          <div className="text-6xl font-bold mb-2" style={{
            color: result.accuracy >= 80 ? '#10B981' : result.accuracy >= 60 ? '#F59E0B' : '#EF4444'
          }}>
            {result.accuracy}%
          </div>
          <p className="text-lg text-teal">Pronunciation Accuracy</p>
        </div>
      )}

      {/* Brand Information */}
      {detectedBrand && (
        <div className="bg-white/40 rounded-2xl p-6 mb-6">
          <h3 className="text-2xl font-bold text-navy font-playfair mb-4">{detectedBrand.name}</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-teal">
            <p><strong>Country:</strong> {detectedBrand.country}</p>
            <p><strong>Founded:</strong> {detectedBrand.founded}</p>
            <p className="col-span-full"><strong>Pronunciation:</strong> {detectedBrand.pronunciation}</p>
            <p className="col-span-full text-sm">{detectedBrand.description}</p>
          </div>
          
          <div className="mt-4 flex justify-center">
            <button
              onClick={playCorrectPronunciation}
              className="px-6 py-3 bg-teal hover:bg-navy text-white rounded-full transition-all duration-300 flex items-center gap-2 font-semibold hover:scale-105 shadow-lg"
            >
              <Volume2 className="w-4 h-4" />
              Hear Correct Pronunciation
            </button>
          </div>
        </div>
      )}

      {/* Feedback Message */}
      <div className="bg-navy/10 rounded-2xl p-6 mb-6">
        <h4 className="text-xl font-bold text-navy mb-3">AI Feedback</h4>
        <p className="text-teal text-lg leading-relaxed">{result.pronunciationFeedback}</p>
      </div>

      {/* Suggestions */}
      {result.suggestions && result.suggestions.length > 0 && (
        <div className="bg-gold/10 rounded-2xl p-6 mb-6">
          <h4 className="text-xl font-bold text-navy mb-3">Improvement Tips</h4>
          <ul className="space-y-2">
            {result.suggestions.map((suggestion, index) => (
              <li key={index} className="text-teal flex items-start gap-2">
                <span className="text-gold">â€¢</span>
                {suggestion}
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Phoneme Analysis */}
      {result.userPhonemes && result.userPhonemes.length > 0 && (
        <div className="bg-white/40 rounded-2xl p-6 mb-6">
          <h4 className="text-xl font-bold text-navy mb-4">Sound Analysis</h4>
          <div className="flex flex-wrap gap-2">
            {result.userPhonemes.map((phoneme, index) => (
              <span
                key={index}
                className={`px-3 py-2 rounded-full text-sm font-medium ${
                  phoneme.correct 
                    ? 'bg-green-100 text-green-800 border border-green-300' 
                    : 'bg-red-100 text-red-800 border border-red-300'
                }`}
              >
                {phoneme.symbol}
              </span>
            ))}
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        <button
          onClick={onTryAgain}
          className="px-8 py-3 bg-navy hover:bg-teal text-gold border-2 border-gold rounded-full font-semibold transition-all duration-300 hover:scale-105 shadow-lg flex items-center gap-2 justify-center"
        >
          <RotateCcw className="w-5 h-5" />
          Try Again
        </button>
        
        {detectedBrand && (
          <Link href={`/brand/${encodeURIComponent(detectedBrand.name)}`}>
            <button className="px-8 py-3 bg-teal hover:bg-navy text-white rounded-full font-semibold transition-all duration-300 hover:scale-105 shadow-lg">
              Learn More About {detectedBrand.name}
            </button>
          </Link>
        )}
      </div>
    </div>
  );
};

export default function AIFeedback() {
  const [isRecording, setIsRecording] = useState(false);
  const [result, setResult] = useState<TranscriptionResult | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [audioUrl, setAudioUrl] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [hasStarted, setHasStarted] = useState(false);
  
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const { toast } = useToast();

  const processAudio = async (audioBlob: Blob) => {
    setIsProcessing(true);
    setError(null);
    
    try {
      console.log('Processing audio with AWS Lambda...');
      
      const arrayBuffer = await audioBlob.arrayBuffer();
      const uint8Array = new Uint8Array(arrayBuffer);
      const base64Audio = btoa(
        Array.from(uint8Array)
          .map(byte => String.fromCharCode(byte))
          .join('')
      );
      
      const lambdaUrl = import.meta.env.VITE_LAMBDA_URL;
      
      if (!lambdaUrl || lambdaUrl === 'https://YOUR_LAMBDA_URL_HERE') {
        throw new Error('Lambda URL not configured. Please set VITE_LAMBDA_URL in your .env.local file');
      }
      
      console.log('Sending request to Lambda:', lambdaUrl);
      
      let response;
      try {
        response = await fetch(lambdaUrl, {
        method: 'POST',
        mode: 'cors', // Explicitly set CORS mode
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({
          audioData: base64Audio,
          contentType: 'audio/webm;codecs=opus',
          mode: 'ai_feedback' // This tells Lambda it's for AI feedback, not practice
        }),
        });
      } catch (fetchError) {
        console.log('Fetch error details:', fetchError);
        if (fetchError.name === 'TypeError' && fetchError.message.includes('Failed to fetch')) {
          throw new Error('Cannot connect to AWS Lambda. This might be a CORS issue or the Lambda function is not accessible. Check your AWS Lambda CORS configuration.');
        }
        throw fetchError;
      }

      console.log('Response status:', response.status);
      console.log('Response ok:', response.ok);

      if (!response.ok) {
        const errorText = await response.text();
        console.log('Error response:', errorText);
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }

      const data = await response.json();
      console.log('Lambda response:', data);

      // If it's a polling response, start polling
      if (data.jobName && !data.transcript) {
        await pollForResults(data.jobName);
        return;
      }

      // Process the result
      const processedResult: TranscriptionResult = {
        transcript: data.transcript,
        detectedBrand: data.detectedBrand || findBestMatch(data.transcript) || undefined,
        pronunciationFeedback: data.pronunciationFeedback || generateFeedback(data.transcript),
        correctPhonemes: data.correctPhonemes || [],
        userPhonemes: data.userPhonemes || [],
        accuracy: data.accuracy || calculateAccuracy(data.transcript),
        brandFound: data.brandFound || !!findBestMatch(data.transcript),
        message: data.message,
        suggestions: data.suggestions || [],
        brandDescription: data.brandDescription,
        azureDetails: data.azureDetails
      };

      setResult(processedResult);
      
    } catch (error: any) {
      console.error('Error processing audio:', error);
      setError(`Failed to process audio: ${error.message}`);
      toast({
        title: "Processing failed",
        description: "Please check your internet connection and try again",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const pollForResults = async (jobName: string) => {
    const maxAttempts = 15;
    let attempts = 0;
    
    while (attempts < maxAttempts) {
      try {
        const response = await fetch('https://YOUR_LAMBDA_URL_HERE', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            mode: 'poll',
            jobName: jobName
          }),
        });

        const data = await response.json();
        
        if (data.status === 'COMPLETED' && data.transcript) {
          const processedResult: TranscriptionResult = {
            transcript: data.transcript,
            detectedBrand: findBestMatch(data.transcript) || undefined,
            pronunciationFeedback: generateFeedback(data.transcript),
            accuracy: calculateAccuracy(data.transcript),
            brandFound: !!findBestMatch(data.transcript),
            suggestions: ['Try speaking more clearly', 'Ensure good microphone quality']
          };
          
          setResult(processedResult);
          return;
        } else if (data.status === 'FAILED') {
          throw new Error('Transcription job failed');
        }
        
        // Wait 2 seconds before next poll
        await new Promise(resolve => setTimeout(resolve, 2000));
        attempts++;
        
      } catch (error) {
        console.error('Error polling:', error);
        break;
      }
    }
    
    throw new Error('Polling timeout - please try again');
  };

  const findBestMatch = (transcript: string): string | null => {
    if (!transcript) return null;
    
    const matches = getClosestBrands(transcript, allBrands, 2);
    return matches.length > 0 ? matches[0].name : null;
  };

  const generateFeedback = (transcript: string): string => {
    const bestMatch = findBestMatch(transcript);
    
    if (bestMatch) {
      return `Great! I detected you said "${bestMatch}". Your pronunciation is recognizable!`;
    } else {
      return `I heard "${transcript}" but couldn't match it to a known car brand. Try speaking more clearly or check if it's in our database.`;
    }
  };

  const calculateAccuracy = (transcript: string): number => {
    const bestMatch = findBestMatch(transcript);
    if (!bestMatch) return 0;
    
    const similarity = 1 - (levenshteinDistance(
      normalizeBrand(transcript), 
      normalizeBrand(bestMatch)
    ) / Math.max(transcript.length, bestMatch.length));
    
    return Math.round(similarity * 100);
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const recorder = new MediaRecorder(stream);
      const audioChunks: Blob[] = [];

      recorder.ondataavailable = (event) => {
        audioChunks.push(event.data);
      };

      recorder.onstop = () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/webm;codecs=opus' });
        const url = URL.createObjectURL(audioBlob);
        setAudioUrl(url);
        processAudio(audioBlob);
        stream.getTracks().forEach(track => track.stop());
      };

      recorder.start();
      mediaRecorderRef.current = recorder;
      setIsRecording(true);
      setHasStarted(true);
      
      toast({
        title: "Recording started",
        description: "Say any car brand name clearly",
      });
    } catch (error) {
      console.error('Error starting recording:', error);
      toast({
        title: "Recording failed",
        description: "Please allow microphone access",
        variant: "destructive",
      });
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      
      toast({
        title: "Recording stopped",
        description: "Processing your pronunciation...",
      });
    }
  };

  const tryAgain = () => {
    setResult(null);
    setError(null);
    setAudioUrl(null);
    setIsProcessing(false);
    setHasStarted(false);
  };

  if (result) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-cream via-offwhite to-cream font-jakarta">
        <div className="container mx-auto px-4 py-8">
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-8">
              <Link href="/search">
                <button className="flex items-center gap-2 text-teal hover:text-navy transition-colors mb-4">
                  <ArrowLeft className="w-5 h-5" />
                  Back to Search
                </button>
              </Link>
              <h1 className="text-4xl md:text-5xl font-bold text-navy font-playfair">
                AI Pronunciation Analysis
              </h1>
            </div>
            
            <FeedbackDisplay result={result} onTryAgain={tryAgain} audioUrl={audioUrl || undefined} />
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-cream via-offwhite to-cream font-jakarta">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-8">
            <Link href="/search">
              <button className="flex items-center gap-2 text-teal hover:text-navy transition-colors mb-4">
                <ArrowLeft className="w-5 h-5" />
                Back to Search
              </button>
            </Link>
            <h1 className="text-4xl md:text-5xl font-bold mb-4 text-navy font-playfair">
              AI Pronunciation Practice
            </h1>
            <p className="text-xl text-teal">
              Say any car brand name and get instant AI feedback
            </p>
          </div>

          <div className="glassmorphic rounded-3xl p-8 md:p-12 bg-white/60 backdrop-blur-lg border border-gold/20 shadow-2xl text-center">
            {!hasStarted && (
              <>
                <div className="text-6xl mb-6">ðŸ§ </div>
                <h2 className="text-3xl font-bold text-navy font-playfair mb-6">Ready to Practice?</h2>
                <p className="text-lg text-teal mb-8 leading-relaxed">
                  Click the microphone button below and say any car brand name. 
                  Our AI will identify what you said and give you detailed feedback on your pronunciation.
                </p>
                <div className="bg-gold/10 rounded-2xl p-6 mb-8">
                  <h3 className="text-xl font-bold text-navy mb-3">How it works:</h3>
                  <ul className="text-teal space-y-2 text-left max-w-md mx-auto">
                    <li>â€¢ Speak any car brand name (Tesla, BMW, Mercedes, etc.)</li>
                    <li>â€¢ AI will identify which brand you said</li>
                    <li>â€¢ Get accuracy score and pronunciation tips</li>
                    <li>â€¢ Learn about the brand you practiced</li>
                  </ul>
                </div>
              </>
            )}

            {isProcessing && (
              <div className="text-center">
                <div className="w-16 h-16 border-4 border-teal/30 border-t-teal rounded-full animate-spin mx-auto mb-6"></div>
                <h3 className="text-2xl font-bold text-navy mb-4">Analyzing Your Pronunciation...</h3>
                <p className="text-teal">Our AI is processing your audio and identifying the brand</p>
              </div>
            )}

            {!isProcessing && (
              <div className="flex flex-col items-center gap-6">
                {isRecording ? (
                  <button
                    onClick={stopRecording}
                    className="w-24 h-24 bg-red-500 hover:bg-red-600 text-white rounded-full flex items-center justify-center shadow-2xl transform hover:scale-105 transition-all duration-300 relative"
                  >
                    <div className="w-6 h-6 bg-white rounded-sm"></div>
                    <div className="absolute -inset-2 bg-red-500/30 rounded-full animate-pulse"></div>
                  </button>
                ) : (
                  <button
                    onClick={startRecording}
                    className="w-24 h-24 bg-teal hover:bg-navy text-white rounded-full flex items-center justify-center shadow-2xl transform hover:scale-105 transition-all duration-300"
                  >
                    <Mic className="w-10 h-10" />
                  </button>
                )}
                
                <p className="text-lg font-semibold text-navy">
                  {isRecording ? 'Recording... Click to stop' : 'Click to start recording'}
                </p>
              </div>
            )}

            {error && (
              <div className="mt-6 p-4 bg-red-50 border-2 border-red-200 rounded-2xl glassmorphic">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <AlertCircle className="w-5 h-5 text-red-500 mr-2" />
                    <span className="text-red-700 font-semibold">Processing failed</span>
                  </div>
                  <button
                    onClick={() => setError(null)}
                    className="text-red-500 hover:text-red-700 transition-colors"
                  >
                    <X className="w-5 h-5" />
                  </button>
                </div>
                <p className="text-red-600 mt-2">{error}</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}